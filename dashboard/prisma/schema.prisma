generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  projects ProjectUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  users     ProjectUser[]
  feedbacks Feedback[]
  setting   ProjectSetting?
  Domain    Domain[]
}

model ProjectUser {
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId  String
  userId     String
  role       String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([projectId, userId])
}

model ProjectSetting {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  plan      String
}

model Feedback {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  domain     Domain   @relation(fields: [domainId], references: [domain])
  domainId   String
  url        String
  email      String
  name       String?
  message    String
  screenshot String?
  metadata   String?
  isHide     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Domain {
  domain    String     @id @unique
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  feedbacks  Feedback[]
}
